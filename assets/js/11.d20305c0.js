(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{218:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"babel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#babel"}},[t._v("#")]),t._v(" Babel")]),t._v(" "),e("p",[t._v("作用：")]),t._v(" "),e("ul",[e("li",[t._v("解析: 将代码(其实就是字符串)转换成 AST( 抽象语法树)")]),t._v(" "),e("li",[t._v("转换: 访问 AST 的节点进行变换操作生成新的 AST")]),t._v(" "),e("li",[t._v("生成: 以新的 AST 为基础生成代码")])]),t._v(" "),e("p",[t._v("@babel/core")]),t._v(" "),e("p",[t._v("@babel/cli： 能够在命令行中使用 "),e("code",[t._v("babel")]),t._v(" 命令来编译文件")]),t._v(" "),e("p",[t._v("babel-node： 是 "),e("code",[t._v("babel-cli")]),t._v(" 的一部分，它不需要单独安装。babel-node"),e("code",[t._v("=")]),t._v("babel-polyfill"),e("code",[t._v("+")]),t._v("babel-register")]),t._v(" "),e("p",[t._v("babel-register：")]),t._v(" "),e("p",[t._v("插件： 语法插件  vs 转换插件")]),t._v(" "),e("p",[t._v("语法插件： 在解析这一步就使得 babel 能够解析更多的语法。没有插件相当于解析的时候就错了，无法进行转换了。")]),t._v(" "),e("p",[t._v("转换插件： 在转换这一步把源码转换并输出")]),t._v(" "),e("p",[t._v("区别： 如果不使用语法插件，则可能在解析时就报错了。 理解是 譬如箭头函数可以使用语法插件，也可以使用转换插件")]),t._v(" "),e("p",[t._v("preset")]),t._v(" "),e("p",[t._v("配置文件")]),t._v(" "),e("p",[t._v("babel 本身不具有任何转化功能，它把转化的功能都分解到一个个 plugin 里面。因此当我们不配置任何插件时，经过 babel 的代码和输入是相同的。")]),t._v(" "),e("p",[t._v("执行顺序：")]),t._v(" "),e("ul",[e("li",[t._v("Plugin 会运行在 Preset 之前。")]),t._v(" "),e("li",[t._v("Plugin 会从前到后顺序执行。")]),t._v(" "),e("li",[t._v("Preset 的顺序则 "),e("strong",[t._v("刚好相反")]),t._v("(从后向前)。")])]),t._v(" "),e("p",[e("strong",[t._v("preset-env")]),t._v("可以处理新增的语法， 但对实例的扩展（Array.prototype.includes），以及很多内置函数（如Promise、Symbol）无用，所以需要引入"),e("strong",[t._v("Polyfill")]),t._v(" 或 "),e("strong",[t._v("Babel-runtime")]),t._v(" 。")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"presets"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/preset-env"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n             "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"targets"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换代码的环境，不配置默认所有")]),t._v("\n             "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"useBuiltIns"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 配合@babel/polyfill进行使用，entry引入所有，usage按需引入，false不引人")]),t._v("\n             "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"corejs"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false | 2 | 3")]),t._v("\n         "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n     "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("babel-polyfill")]),t._v(" "),e("p",[e("code",[t._v("import @babel/polyfill")]),t._v("等同于：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'core-js/stable'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'regenerator-runtime/runtime'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("但是会污染全局，譬如类库和我们代码都引入Promise，会冲突。")]),t._v(" "),e("p",[t._v("babel-runtime一般应用于两种场景：")]),t._v(" "),e("ul",[e("li",[t._v("开发类库/工具（生成不污染全局空间和内置对象原型的代码）")]),t._v(" "),e("li",[t._v("借助 "),e("code",[t._v("@babel/runtime")]),t._v(" 中帮助函数（helper function）移除冗余工具函数")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"presets"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/preset-env"')]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"plugins"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@babel/plugin-transform-runtime"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"corejs"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可选 false | 2 | 3")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("code",[t._v("corejs: false")]),t._v(" 其实等同于使用 "),e("code",[t._v("@babel/polyfill")]),t._v(" 时的 "),e("code",[t._v("useBuiltIns: false")]),t._v("，只对ES语法进行了转换。"),e("code",[t._v("corejs：2")]),t._v(" 等同于 "),e("code",[t._v("Babel 6")]),t._v("时的 "),e("code",[t._v("polyfill: true")]),t._v(" ，它们都会为代码创建一个沙盒环境，为 "),e("code",[t._v("core-js")]),t._v(" 提供假名，这样就做到了不污染全局空间。"),e("code",[t._v("corejs: 3")]),t._v(" 是在 "),e("code",[t._v("corejs: 2")]),t._v("的基础上进而解决了之前无法实例方法的窘况，同时也保持了不污染全局空间，简直完美~")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("Babel < 7.4.0")]),t._v(" "),e("p",[t._v("bable-polyfill是在实例上直接添加方法，所以会污染原型。可用"),e("code",[t._v("useBuiltIns")]),t._v("配置引入的范围。")]),t._v(" "),e("p",[t._v("bable-runtime可防止污染原型，但不支持实例上的方法。")]),t._v(" "),e("p",[t._v("babel-preset-env能根据当前的运行环境，自动确定你需要的 plugins 和 polyfills，减少引入的包，但应该也是会污染原型的。")]),t._v(" "),e("ul",[e("li",[t._v("开发类库, 选择 @babel/runtime")]),t._v(" "),e("li",[t._v("内部项目，@babel/polyfill")])])]),t._v(" "),e("li",[e("p",[e("code",[t._v("Babel >= 7.4.0")]),t._v("，啥也不说，直接上 "),e("code",[t._v("@babel/runtime")]),t._v("吧，因为你要的全都有啊")]),t._v(" "),e("p",[t._v("不污染全局，也支持实例的方法了。")])])]),t._v(" "),e("p",[t._v("应用篇：")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://juejin.im/post/5ddff3abe51d4502d56bd143#heading-7",target:"_blank",rel:"noopener noreferrer"}},[t._v("不容错过的 Babel7 知识"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/43249121",target:"_blank",rel:"noopener noreferrer"}},[t._v("一口（很长的）气了解 babel"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.im/post/5d0373a95188251e1b5ebb6c#heading-2",target:"_blank",rel:"noopener noreferrer"}},[t._v("结合Babel 7.4.0 谈一下Babel-runtime 和 Babel-polyfill"),e("OutboundLink")],1)])]),t._v(" "),e("p",[t._v("原理篇：")]),t._v(" "),e("ul",[e("li",[e("p",[e("a",{attrs:{href:"https://juejin.im/post/5d94bfbf5188256db95589be",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入浅出 Babel 上篇：架构和原理 + 实战"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[e("a",{attrs:{href:"https://juejin.im/post/5c03b85ae51d450c740de19c",target:"_blank",rel:"noopener noreferrer"}},[t._v("面试官(7): 聊一聊 Babel?"),e("OutboundLink")],1)])]),t._v(" "),e("li",[e("p",[t._v("[深入Babel，这一篇就够了")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);