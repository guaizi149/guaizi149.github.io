(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{240:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"git常用操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#git常用操作"}},[t._v("#")]),t._v(" git常用操作")]),t._v(" "),s("h3",{attrs:{id:"查看"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查看"}},[t._v("#")]),t._v(" 查看")]),t._v(" "),s("p",[s("code",[t._v("git reflog")]),t._v("  查看引用日志")]),t._v(" "),s("p",[s("code",[t._v("git log")])]),t._v(" "),s("p",[s("code",[t._v("git show 1c002d...")]),t._v(" 查看1c002d的提交历史")]),t._v(" "),s("p",[s("code",[t._v("git show HEAD@{3}")]),t._v(" 查看之前第三次的提交历史")]),t._v(" "),s("p",[s("code",[t._v("git show HEAD^")]),t._v(" 查看上一次提交历史")]),t._v(" "),s("p",[s("code",[t._v("git show HEAD~3")]),t._v("  父提交的父提交的父提交")]),t._v(" "),s("p",[t._v("![image-20190104104026054](/Users/ouliang/Library/Application Support/typora-user-images/image-20190104104026054.png)")]),t._v(" "),s("h4",{attrs:{id:"提交区间"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提交区间"}},[t._v("#")]),t._v(" 提交区间")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/double-dot.png",alt:"Example history for range selection."}})]),t._v(" "),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 双点")]),t._v("\n$ git log master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("experiment "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("显示在experiment中而不再master中的提交\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v("\n\n$ git log experiment"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("master "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("显示在master中而不再experiment中的提交\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),t._v("\n\n$ git log origin"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HEAD")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("输出在当前分支而不在远程origin中的提交，也就是git push所提交的内容\n")])])]),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 在refB中但不再refA中的提交\n$ git log refA"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("refB\n$ git log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("refA refB\n$ git log refB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" refA\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 在refA refB但不在refC中的提交\n$ git log refA refB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v("refC\n$ git log refA refB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" refC\n")])])]),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" 两者不同的提交\n$ git log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("left"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("right master"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("experiment\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("F")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("E")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("D")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v("\n")])])]),s("div",{staticClass:"language-ruby extra-class"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("git log "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("author"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("欧亮 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("pretty"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("format"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%h - %an, %ar : %s"')]),t._v("  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("since"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2019-01-23"')]),t._v("\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("参数")]),t._v(" "),s("th",[t._v("意义")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[s("code",[t._v("--abbrev-commit")])]),t._v(" "),s("td",[t._v("简短SHA-1值")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("--pretty=oneline")])]),t._v(" "),s("td",[t._v("SHA-1值和msg一行显示")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("--author=OULIANG227")])]),t._v(" "),s("td",[t._v("显示特定作者的提交")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("-p -n")])]),t._v(" "),s("td",[t._v("显示近n次提交的内容差异，相当于git log + git show")])]),t._v(" "),s("tr",[s("td",[s("code",[t._v("--stat")])]),t._v(" "),s("td",[t._v("显示简略的统计信息![image-20190104113700548](/Users/ouliang/Library/Application Support/typora-user-images/image-20190104113700548.png)")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td")])])]),t._v(" "),s("ul",[s("li",[t._v("引用日志只存在本地")])]),t._v(" "),s("h3",{attrs:{id:"添加"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#添加"}},[t._v("#")]),t._v(" 添加")]),t._v(" "),s("p",[s("code",[t._v("git add -i")]),t._v(" 交互式暂存。 相当于"),s("code",[t._v("git add -p")]),t._v("和"),s("code",[t._v("git add -patch")]),t._v("。")]),t._v(" "),s("p",[t._v("###暂存")]),t._v(" "),s("p",[s("code",[t._v("git stash")]),t._v(" 默认会把"),s("code",[t._v("git add")]),t._v("添加的文件也stash，未跟踪的文件不会储藏。 "),s("code",[t._v("git stash --keep-index")]),t._v("不储藏"),s("code",[t._v("git add")]),t._v("已暂存的东西。"),s("code",[t._v("git stash -u")]),t._v("储藏未跟踪的文件。")]),t._v(" "),s("p",[s("code",[t._v("git stash list")])]),t._v(" "),s("p",[s("code",[t._v("git stash apply stash@{2}")]),t._v("  会把"),s("code",[t._v("git add")]),t._v("的文件变成add之前的状态，就是index区的文件拿回到workspace中。默认stash{0}")]),t._v(" "),s("p",[s("code",[t._v("git stash apply --index")]),t._v(" "),s("code",[t._v("git add")]),t._v("的文件还存在index区域")]),t._v(" "),s("p",[s("code",[t._v("git stash drop stash@{3}")]),t._v(" 移除。默认stash{0}")]),t._v(" "),s("p",[s("code",[t._v("git stash pop")]),t._v(" 立即应用储藏并从栈上扔掉它")]),t._v(" "),s("p",[s("code",[t._v("git stash --patch")]),t._v(" 交互式储藏")]),t._v(" "),s("h3",{attrs:{id:"清理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#清理"}},[t._v("#")]),t._v(" 清理")]),t._v(" "),s("p",[s("code",[t._v("git clean")]),t._v(" 只会移除没有忽略的未跟踪文件")]),t._v(" "),s("p",[s("code",[t._v("git clean -n")]),t._v(" 告诉你哪些文件会被删除，不会真正的删除")]),t._v(" "),s("p",[s("code",[t._v("git clean -f")]),t._v(" 删除没有被track的文件")]),t._v(" "),s("p",[s("code",[t._v("git clean -df")]),t._v(" 删除没有track的文件和文件夹")]),t._v(" "),s("h3",{attrs:{id:"vm常用操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vm常用操作"}},[t._v("#")]),t._v(" Vm常用操作")]),t._v(" "),s("p",[t._v("vm有编辑模式和命令模式。i进入编辑模式后就像使用记事本一样，之后使用esc后可以使用以下的各种命令。")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("命令")]),t._v(" "),s("th",[t._v("操作")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("i")]),t._v(" "),s("td",[t._v("进入编辑模式")])]),t._v(" "),s("tr",[s("td",[t._v("esc")]),t._v(" "),s("td",[t._v("退出编辑模式，进入命令模式")])]),t._v(" "),s("tr",[s("td",[t._v("wq")]),t._v(" "),s("td",[t._v("保存退出")])]),t._v(" "),s("tr",[s("td",[t._v("q!")]),t._v(" "),s("td",[t._v("不保存退出")])]),t._v(" "),s("tr",[s("td",[t._v("q")]),t._v(" "),s("td",[t._v("没有修改时，直接退出")])]),t._v(" "),s("tr",[s("td",[t._v("u")]),t._v(" "),s("td",[t._v("撤销")])]),t._v(" "),s("tr",[s("td",[t._v("yy或者Y")]),t._v(" "),s("td",[t._v("复制")])]),t._v(" "),s("tr",[s("td",[t._v("p")]),t._v(" "),s("td",[t._v("粘贴")])]),t._v(" "),s("tr",[s("td",[t._v("dd")]),t._v(" "),s("td",[t._v("删除当前行")])])])]),t._v(" "),s("h3",{attrs:{id:"重写历史"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重写历史"}},[t._v("#")]),t._v(" 重写历史")]),t._v(" "),s("p",[s("code",[t._v("git commmit --amend")]),t._v(" 可以在提交后修改commit msg，或者先"),s("code",[t._v("git add")]),t._v("或者"),s("code",[t._v("git rm")]),t._v("之后，在运行--amend修改历史。不要在push后再使用此命令。")]),t._v(" "),s("h3",{attrs:{id:"重置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重置"}},[t._v("#")]),t._v(" 重置")]),t._v(" "),s("p",[t._v("![image-20190108180557908](/Users/ouliang/Library/Application Support/typora-user-images/image-20190108180557908.png)")]),t._v(" "),s("p",[t._v("![image-20190108180933697](/Users/ouliang/Library/Application Support/typora-user-images/image-20190108180933697.png)")]),t._v(" "),s("p",[s("code",[t._v("git reset")]),t._v("之后，再次提交，需要使用"),s("code",[t._v("git push --force")]),t._v("强制提交覆盖之前的commit。这样提交后上图中的"),s("code",[t._v("38eb946")]),t._v("的commit就不存在了。")]),t._v(" "),s("p",[s("code",[t._v("--soft")]),t._v("相当于回到"),s("code",[t._v("git commit")]),t._v("前，之前的commit的变化的文件会已绿色显示，此时index区域是V3,HEAD区是V2，等待再次commmit。")]),t._v(" "),s("p",[t._v("``--mixed"),s("code",[t._v("回到")]),t._v("git add`前，之前add的文件会已红色显示，此时index区域是V2，工作区是V3。")]),t._v(" "),s("p",[s("code",[t._v("--hard")]),t._v("则是更新所有。会覆盖工作区未提交的变动。")]),t._v(" "),s("p",[s("code",[t._v("reset")]),t._v(" 命令会以特定的顺序重写这三棵树，在你指定以下选项时停止：")]),t._v(" "),s("ol",[s("li",[t._v("移动 HEAD 分支的指向 "),s("em",[t._v("（若指定了 --soft，则到此停止）")])]),t._v(" "),s("li",[t._v("使索引看起来像 HEAD "),s("em",[t._v("（若未指定 --hard，则到此停止）")])]),t._v(" "),s("li",[t._v("使工作目录看起来像索引")])]),t._v(" "),s("h4",{attrs:{id:"通过路径来重置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通过路径来重置"}},[t._v("#")]),t._v(" 通过路径来重置")]),t._v(" "),s("p",[s("code",[t._v("git reset file.txt")]),t._v("，"),s("code",[t._v("reset")]),t._v(" 命令也可以接受一个 "),s("code",[t._v("--patch")]),t._v(" 选项")]),t._v(" "),s("ol",[s("li",[t._v("移动 HEAD 分支的指向 "),s("em",[t._v("（已跳过）")])]),t._v(" "),s("li",[t._v("让索引看起来像 HEAD "),s("em",[t._v("（到此处停止）")])])]),t._v(" "),s("p",[t._v("![image-20190108182445664](/Users/ouliang/Library/Application Support/typora-user-images/image-20190108182445664.png)")]),t._v(" "),s("p",[t._v("如果我们现在运行 "),s("code",[t._v("git commit")]),t._v("，它就会记录一条“将该文件恢复到 "),s("strong",[t._v("v1")]),t._v(" 版本”的更改，尽管我们并未在工作目录中真正地再次拥有它。")]),t._v(" "),s("p",[t._v("取消暂存： "),s("code",[t._v("git reset HEAD <file>")]),t._v("。 相当于"),s("code",[t._v("git add")]),t._v("相反。")]),t._v(" "),s("p",[t._v("![image-20190108182824503](/Users/ouliang/Library/Application Support/typora-user-images/image-20190108182824503.png)")]),t._v(" "),s("p",[t._v("此时相当于使用v1覆盖v2，也就是"),s("code",[t._v("file.txt")]),t._v(" add前的状态。")]),t._v(" "),s("p",[t._v("####压缩")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/reset-squash-r2.png",alt:"reset squash r2"}})]),t._v(" "),s("p",[t._v("再次"),s("code",[t._v("git commit")]),t._v("， 这样提交历史中将不存在V2版本。")]),t._v(" "),s("h3",{attrs:{id:"检出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#检出"}},[t._v("#")]),t._v(" 检出")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://git-scm.com/book/en/v2/images/reset-checkout.png",alt:"reset checkout"}})]),t._v(" "),s("ol",[s("li",[s("p",[t._v("将branch1，branch2都合并到master后，可以切换到branch2直接"),s("code",[t._v("git reset master")]),t._v("，这时master和branch2都指向了统一commit，不需要再重新基于master拉取分支了。(此时本地可能会比远程超前很多个版本，这是因为本地已经和master的提交一致，此时只要git push即可)")])]),t._v(" "),s("li",[s("p",[t._v("重命名远程分支：a、先将本地分支重命名")]),t._v(" "),s("p",[t._v("git branch -m oldBranch newBranch")]),t._v(" "),s("p",[t._v("b、删除远程分支（远端无此分支则跳过该步骤）")]),t._v(" "),s("p",[t._v("git push --delete origin oldBranch")]),t._v(" "),s("p",[t._v("c、将重命名后的分支推到远端")]),t._v(" "),s("p",[t._v("git push origin newBranch")]),t._v(" "),s("p",[t._v("d、把修改后的本地分支与远程分支关联")]),t._v(" "),s("p",[t._v("git branch --set-upstream-to origin/newBranch")])]),t._v(" "),s("li",[s("p",[t._v("删除远程无用分支")]),t._v(" "),s("p",[t._v("git remote prune origin")])]),t._v(" "),s("li",[s("p",[t._v("如何将最新的几个连续commit合并成一个commit")]),t._v(" "),s("p",[t._v("先使用git reset commit号，将准备合并的commit重新add后git push —force")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);